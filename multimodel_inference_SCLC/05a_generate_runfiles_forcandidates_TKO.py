# Will take everything in the specified directory (in line 6) and make a run_model file for it

import os
import sys

candidate_model_dir = '../candidate_models/'
run_file_dir = '../run_files_for_candidate_models/'

for number in [x.split('_')[-1].split('.')[0] for x in os.listdir(candidate_model_dir) if
               'model_' in x and '.py' in x and not 'run' in x and not 'plot' in x and not 'posttx' in x and not 'testing' in x]:
#    if int(number) > 1:
#        continue
    print(number)
    str_to_write_1 = """import os
import sys
sys.path.append('"""+candidate_model_dir+"""')

from pysb.simulator import ScipyOdeSimulator
import numpy as np
from scipy.stats import norm,uniform,beta,expon
from model_"""
    str_to_write_1 += str(number)
    str_to_write_2 = """ import model
import seaborn as sns
from matplotlib import pyplot as plt
import copy
from itertools import chain
import pandas as pd
from gleipnir.sampled_parameter import SampledParameter
from gleipnir.nested_sampling import NestedSampling    
from gleipnir.multinest import MultiNestNestedSampling
import pymultinest

import signal
from datetime import datetime

import argparse

parser = argparse.ArgumentParser()
# add this later
#parser.add_argument("dataset", help="Name of dataset the model selection run is using. Required to avoid confusion between runs.")
parser.add_argument("dirmodels", help="Directory where Multinest working files will be located (in directories \'dir_model_{int}\', as well as evidence printouts. Required.")
parser.add_argument("-iter", "--model_iteration", help="If doing multiple runs of the same model & Multinest implementation, provide this model's iteration number.",
                    type=int)
parser.add_argument("-imp", "--importance_nested_sampling", help="Use importance nested sampling in Multinest.",
                    action="store_true")
parser.add_argument("-ceff", "--constant_efficiency", help="Use constant efficiency mode in Multinest.",
                    action="store_true")
parser.add_argument("-f", "--sampling_efficiency", help="Target sampling efficiency in Multinest run. Default: 0.05",
                    type=float)
parser.add_argument("-p", "--population_size", help="Number of live points in the nested sampling population. Default: 3000",
                    type=int)
#parser.add_argument("-o", "--outfile_directory", help="Directory where .out files are located. Default: current working directory.")
#parser.add_argument("-w", "--write_job_completes", help="A filename which, if provided, test_joblib.py will write/append to when each job finishes, along with printing to STDOUT. Default: STDOUT only.")

args = parser.parse_args()

# maybe add later
#outdir = args.outfile_directory if args.outfile_directory else print ('Using current working directory '+os.getcwd()+' for outfiles')
#if outdir:
#    outdir = outdir if os.path.exists(outdir) else print('path \''+outdir+'\' does not exist, using current working directory '+os.getcwd()+' for outfiles')
#if not outdir:
#    outdir = os.getcwd()
#if args.write_job_completes:
#    print ('Writing to '+str(args.write_job_completes)+' when each model run finishes. Will include exit status.')
#    with open(args.write_job_completes,'w') as jobs_file:
#        jobs_file.write('Running '+__file__+'starting at '+str(datetime.now())+'.\\n')

modeliter = args.model_iteration if args.model_iteration else False
uses_modeliter = True if modeliter else False # False as default because more often i'm not using modeliter

INS = args.importance_nested_sampling
ceff = args.constant_efficiency
f = args.sampling_efficiency if args.sampling_efficiency else 0.05
popsize = args.population_size if args.population_size else 3000
paramdir = args.dirmodels
#paramdir = "/data/lola/beiksp/TKO_betafit_"+str(f)+"_"+str(popsize)+"_inprogress"

if INS:
    fn_ins = "T"
else:
    fn_ins = "F"
if ceff:
    fn_ceff = "T"
else:
    fn_ceff = "F"

if not os.path.exists(paramdir):
    print ('\\n\\nNo destination directory in /data. Multinest will not run.\\n')
    print ('Likely you need to create '+str(paramdir)+'\\n')
    sys.exit(0)

class TimeoutException(RuntimeError):
    \""" Time out occurred! \"""
    pass

def handler(signum, frame):
    print('forever is over!')
    raise TimeoutException()

# Register the signal function handler
signal.signal(signal.SIGALRM, handler)

tspan = np.linspace(0,60,100)
solver = ScipyOdeSimulator(model,integrator='lsoda',compiler='cython')
param_values = np.array([p.value for p in model.parameters])
# make rates_mask later
#rates_mask = #np.concatenate((np.ones(9,dtype=bool),np.zeros(4,dtype=bool),np.ones(len(param_values[13:]),dtype=bool)))

#cellline_pct = {
#'NE_obs':0.82827978,
#'NEv1_obs':0.071928499,
#'NEv2_obs':0.0830788,
#'NonNE_obs':0.016712921
#}
#
#cellline_stdev = {
#'NE_obs':0.114751192,
#'NEv1_obs':0.094443104,
#'NEv2_obs':0.099794185,
#'NonNE_obs':0.020277219
#}
#
TKO_pct = {
'NE_obs':0.670866848446898,
'NEv1_obs':0.001011170766988,
'NEv2_obs':0.294235217878072,
'NonNE_obs':0.033886762908045
}

TKO_stdev = {
'NE_obs':0.152576600276884,
'NEv1_obs':0.005730133430503,
'NEv2_obs':0.147927688661517,
'NonNE_obs':0.031684600453998
}

#Oliver_pct = {
#'NE_obs':0.259122843833646,
#'NEv1_obs':0.318704767383416,
#'NEv2_obs':0.010548327444441,
#'NonNE_obs':0.411624061338496
#}
#
#
#Oliver_stdev = {
#'NE_obs':0.171187022711461,
#'NEv1_obs':0.157524233180492,
#'NEv2_obs':0.016363538701013,
#'NonNE_obs':0.223000331826237
#}

# ok it really should be all 4, just some are zero and always zero
obs_list = ['NE_obs','NEv1_obs','NEv2_obs','NonNE_obs']

def beta_dist_from_mu_and_stdev(mu,std):
    nu_out = (mu*(1-mu)/(std**2)) - 1
    alpha_out = mu*nu_out
    beta_out = (1-mu)*nu_out
    return beta(alpha_out,beta_out)


# beta distrs for means near zero are U-shaped with the bottom left of the curve near zero
# if you try to get a y-value for an x-value too close to zero it'll just be inf
# so to avoid returning inf as the likelihood value, clip x-values to the lowest possible that won't return y=inf
# based on beta distr transformation using mu and sigma to generate alpha and beta (Kruschke, 2011; see Methods), requires sigma^2 < mu(1-mu)
# so if mu is otherwise zero for likelihood fxn, instead find the lowest value that fits sigma^2 < mu(1-mu)
lowest_allowed = {}
for i in TKO_stdev:
    mu = 1e-5
    while not (TKO_stdev[i]**2 < mu*(1-mu)):
        mu *= 1.00001
    lowest_allowed[i] = mu

TOLERANCE = 1e-4
def likelihood(position):
    tspan = np.linspace(0,60,1001)
    Y=np.copy(position)
    param_values[rates_mask] = 10 ** Y
    signal.alarm(30)
    try:
        sim = solver.run(param_values=param_values,tspan=tspan).all
    except TimeoutException as exc:
        #return -np.inf
        return -1e200
    else:
        signal.alarm(0)
    sim_data = {}
    all_lessthan1 = True
    for obs in obs_list:
        sim_data[obs] = sim[obs] #[:new_end]
        if sim[obs][-1] > 1:
            all_lessthan1 = False
    # if there aren't enough cells, or there are too many cells, or if the end of the sim gets to NaNs (because it grew too fast)
    if sim['total_cells'][-1] < 100:
        #print ('not enough cells ' + str(sim['total_cells'][-1]))
        #return -np.inf
        return -1e200
    elif np.isnan(sim['total_cells'][-1]):
        #print ('too many cells computer couldnt handle ' + str(sim['total_cells'][-1]))
        #return -np.inf
        return -1e200
    elif all_lessthan1: #smallest size in SCLC allografts (Lim et al) 1cm^3 (~10^8 cells), largest ~3.5cm^3 (~4*10^8)
        #print ('something crashed out at the end ')
        #print (sim_data)
        #return np.inf*-1
        return -1e200
    else:
        # get the percentages so you can check for equilibrium - first get the total # of cells
        sim_pct_run = {}
        for obs in obs_list:
            sim_pct_run[obs] = np.true_divide(sim[obs],sim['total_cells'])
        # is it in equilibrium?
        not_eq = False
        total_stack = (sim_pct_run[obs_list[0]],)
        for obs in obs_list[1:]:
            total_stack = total_stack + (sim_pct_run[obs],)                    
        y = np.column_stack(total_stack)
        for idx in range(y.shape[1]):
            try:
                derivative = (y[:,idx][-1]-y[:,idx][-75])/(tspan[-1]-tspan[-75])
                if abs(derivative)>TOLERANCE or np.isnan(derivative): #or np.isnan probably shouldnt happen but just in case
                    not_eq = True
            except IndexError: # if tspan has less than 75 indices after the nanind process - not doing this anymore but leaving try/catch anyway...
                #return -np.inf
                return -1e200
                continue
        if not_eq:
            #return -np.inf
            return -1e200
        # Score
        total_cost_nonzeros = np.sum([
                            beta_dist_from_mu_and_stdev(
                                                        np.clip(sim_pct_run[obs][-1],lowest_allowed[obs],(1-lowest_allowed[obs])),
                                                        TKO_stdev[obs]
                                                       )
                            .logpdf(TKO_pct[obs]) for obs in obs_list[:-1]
                                if not np.all(sim_pct_run[obs]==0)
                           ])
        total_cost_zeros = np.sum([
                            expon(0,scale=TKO_stdev[obs])
                            .logpdf(TKO_pct[obs]) for obs in obs_list[:-1]
                                if np.all(sim_pct_run[obs]==0)
                           ])
        total_cost = np.sum([total_cost_nonzeros,total_cost_zeros])
        if np.isnan(total_cost):
            #total_cost = #np.inf*-1
            total_cost = -1e200
        return total_cost

# Make sampled_params_list to provide to the PyDREAM run call
sampled_params_list = list()

## divs and deaths without effect option
# NE
sampled_params_list.append(SampledParameter(name='sp_division_0_NE_cell_1kc_0', prior=norm(loc=np.log10(0.469),scale=0.026)))
sampled_params_list.append(SampledParameter(name='sp_die_0_NE_cell_1kc_0', prior=norm(loc=np.log10(0.081),scale=0.236)))
# NEv1
sampled_params_list.append(SampledParameter(name='sp_division_0_NEv1_cell_1kc_0', prior=norm(loc=np.log10(0.7831),scale=.481)))
sampled_params_list.append(SampledParameter(name='sp_die_0_NEv1_cell_1kc_0', prior=norm(loc=np.log10(0.081),scale=.236)))
# NEv2
sampled_params_list.append(SampledParameter(name='sp_division_0_NEv2_cell_1kc_0', prior=norm(loc=np.log10(0.1898),scale=0.1197)))
sampled_params_list.append(SampledParameter(name='sp_die_0_NEv2_cell_1kc_0', prior=norm(loc=np.log10(0.081),scale=0.236)))
# NonNE
sampled_params_list.append(SampledParameter(name='sp_division_0_NonNE_cell_1kc_0', prior=norm(loc=np.log10(0.769),scale=.079)))
sampled_params_list.append(SampledParameter(name='sp_die_0_NonNE_cell_1kc_0', prior=norm(loc=np.log10(0.081),scale=0.236)))

## diffs without effect option
# NE to NEv2
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NE_cell_NEv2_diff_cell_1kf_0', prior=uniform(loc=np.log10(0.01),scale=3.5)))
# NE to NEv1
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NE_cell_NEv1_diff_cell_1kf_0', prior=uniform(loc=np.log10(0.01),scale=3.5)))
# NEv2 to NonNE
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NEv2_cell_NonNE_diff_cell_1kf_0', prior=uniform(loc=np.log10(0.01),scale=3.5)))
# NEv1 to NonNE
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NEv1_cell_NonNE_diff_cell_1kf_0', prior=uniform(loc=np.log10(0.01),scale=3.5)))

## No more effects for diff - all of these are optional rxns
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NEv1_cell_NEv2_diff_cell_1kf_0', prior=uniform(loc=np.log10(0.01),scale=3.5)))
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NE_cell_NonNE_diff_cell_1kf_0', prior=uniform(loc=np.log10(0.01),scale=3.5)))
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NEv2_cell_NEv1_diff_cell_1kf_0', prior=uniform(loc=np.log10(0.01),scale=3.5)))
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NonNE_cell_NE_diff_cell_1kf_0', prior=uniform(loc=np.log10(0.01),scale=3.5)))

# No more effects for diff - these are optional reactions (their other-direction rxns are always present - NE->NEv2, NEv2->NonNE, NE->NEv1, NEv1->NonNE)
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NEv1_cell_NE_diff_cell_1kf_0', prior=uniform(loc=np.log10(0.01),scale=3.5)))
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NonNE_cell_NEv1_diff_cell_1kf_0', prior=uniform(loc=np.log10(0.01),scale=3.5)))
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NEv2_cell_NE_diff_cell_1kf_0', prior=uniform(loc=np.log10(0.01),scale=3.5)))
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NonNE_cell_NEv2_diff_cell_1kf_0', prior=uniform(loc=np.log10(0.01),scale=3.5)))

## Divs, deaths with effect

# NE div
sampled_params_list.append(SampledParameter(name='sp_division_0_NE_cell_0', prior=norm(loc=np.log10(0.469),scale=0.026)))
sampled_params_list.append(SampledParameter(name='sp_division_0_NE_cell_1', prior=norm(loc=np.log10(.4925),scale=0.5)))
sampled_params_list.append(SampledParameter(name='sp_division_0_NE_cell_2', prior=norm(loc=np.log10(1000),scale=2)))
# NE die
sampled_params_list.append(SampledParameter(name='sp_die_0_NE_cell_0', prior=norm(loc=np.log10(0.081),scale=0.236)))
sampled_params_list.append(SampledParameter(name='sp_die_0_NE_cell_1', prior=norm(loc=np.log10(0.077),scale=.5)))
sampled_params_list.append(SampledParameter(name='sp_die_0_NE_cell_2', prior=norm(loc=np.log10(1000),scale=2)))

# NEv1 div
sampled_params_list.append(SampledParameter(name='sp_division_0_NEv1_cell_0', prior=norm(loc=np.log10(0.7831),scale=.481)))
sampled_params_list.append(SampledParameter(name='sp_division_0_NEv1_cell_1', prior=norm(loc=np.log10(.8223),scale=.5)))
sampled_params_list.append(SampledParameter(name='sp_division_0_NEv1_cell_2', prior=norm(loc=np.log10(1000),scale=2)))
# NEv1 die
sampled_params_list.append(SampledParameter(name='sp_die_0_NEv1_cell_0', prior=norm(loc=np.log10(0.081),scale=0.236)))
sampled_params_list.append(SampledParameter(name='sp_die_0_NEv1_cell_1', prior=norm(loc=np.log10(0.077),scale=.5)))
sampled_params_list.append(SampledParameter(name='sp_die_0_NEv1_cell_2', prior=norm(loc=np.log10(1000),scale=2)))

# NEv2 div
sampled_params_list.append(SampledParameter(name='sp_division_0_NEv2_cell_0', prior=norm(loc=np.log10(0.1898),scale=.1197)))
"""

    # will the effect increase or decrease NEv2 division for this run?
    if (int(number) >= 0 and int(number) <= 11) or (int(number) >= 44 and int(number) <= 55) or int(number) in
        # these are for list 13s and 16s: NEv2 affected by NonNE_obs (i.e. it is considered neuroendocrine)
        str_to_write_3 = """sampled_params_list.append(SampledParameter(name='sp_division_0_NEv2_cell_1', prior=norm(loc=np.log10(0.1993),scale=.5)))"""
    else:
        # these are for list 14s and 17s: NEv2 affected by the neuroendocrine types (i.e. since it is Hes1+ it is considered non-neuroendocrine)
        str_to_write_3 = """sampled_params_list.append(SampledParameter(name='sp_division_0_NEv2_cell_1', prior=norm(loc=np.log10(0.1803),scale=.5)))"""
    str_to_write_4 = """
sampled_params_list.append(SampledParameter(name='sp_division_0_NEv2_cell_2', prior=norm(loc=np.log10(1000),scale=2)))

# NEv2 die      
sampled_params_list.append(SampledParameter(name='sp_die_0_NEv2_cell_0', prior=norm(loc=np.log10(0.081),scale=0.236)))
"""
    # will the effect decrease or increase NEv2 death for this run?
    if (int(number) >= 0 and int(number) <= 11) or (int(number) >= 44 and int(number) <= 55) or int(number) in [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1122, 1123, 1124, 1125, 1126, 1127, 1134, 1135, 1136, 1137, 1138, 1139, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1170, 1171, 1172, 1173, 1174, 1175, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1200, 1201, 1202, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1224, 1225, 1226, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1248, 1249, 1250, 1251, 1252, 1253, 1260, 1261, 1262, 1266, 1267, 1268, 1269, 1270, 1271, 1288, 1289, 1290, 1291, 1292, 1293, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1354, 1355, 1356, 1357, 1358, 1359, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1409, 1410, 1411, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1453, 1454, 1455, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1497, 1498, 1499, 1500, 1501, 1502, 1519, 1520, 1521, 1545, 1547, 1549, 1551, 1552, 1555, 1556, 1559, 1560, 1567, 1568, 1571, 1572, 1575, 1576, 1627, 1628, 1629, 1630, 1641, 1642, 1643, 1644, 1655, 1656, 1657, 1658, 1669, 1670, 1671, 1672, 1683, 1684, 1685, 1686, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2357, 2358, 2359, 2360, 2361, 2362, 2363, 2364, 2365, 2366, 2367, 2368, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411, 2412, 2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850, 2851, 2852, 2885, 2886, 2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900, 2901, 2902, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260, 3325, 3326, 3327, 3328, 3329, 3330, 3331, 3332, 3333, 3334, 3335, 3336, 3369, 3370, 3371, 3372, 3373, 3374, 3375, 3376, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3384, 3385, 3386, 3435, 3436, 3437, 3438, 3439, 3440, 3441, 3442, 3443, 3444, 3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3501, 3502, 3503, 3504, 3505, 3506, 3507, 3508, 3509, 3510, 3511, 3512, 3513, 3514, 3515, 3516, 3517, 3518, 3519, 3520, 3521, 3522, 3523, 3524, 3589, 3590, 3591, 3592, 3593, 3594, 3595, 3596, 3597, 3598, 3599, 3600, 3633, 3634, 3635, 3636, 3637, 3638, 3639, 3640, 3641, 3642, 3643, 3644, 3645, 3646, 3647, 3648, 3649, 3650, 3699, 3700, 3701, 3702, 3703, 3704, 3705, 3706, 3707, 3708, 3709, 3710, 3711, 3712, 3713, 3714, 3715, 3716, 3765, 3766, 3767, 3768, 3769, 3770, 3771, 3772, 3773, 3774, 3775, 3776, 3777, 3778, 3779, 3780, 3781, 3782, 3783, 3784, 3785, 3786, 3787, 3788, 3853, 3854, 3855, 3856, 3857, 3858, 3859, 3860, 3861, 3862, 3863, 3864, 3897, 3898, 3899, 3900, 3901, 3902, 3903, 3904, 3905, 3906, 3907, 3908, 3909, 3910, 3911, 3912, 3913, 3914, 3915, 3916, 3917, 3918, 3919, 3920, 3985, 3986, 3987, 3988, 3989, 3990, 3991, 3992, 3993, 3994, 3995, 3996, 4029, 4030, 4031, 4032, 4033, 4034, 4035, 4036, 4037, 4038, 4039, 4040, 4041, 4042, 4043, 4044, 4045, 4046, 4095, 4096, 4097, 4098, 4099, 4100, 4101, 4102, 4103, 4104, 4105, 4106, 4107, 4108, 4109, 4110, 4111, 4112, 4161, 4162, 4163, 4164, 4165, 4166, 4167, 4168, 4169, 4170, 4171, 4172, 4173, 4174, 4175, 4176, 4177, 4178, 4227, 4228, 4229, 4230, 4231, 4232, 4233, 4234, 4235, 4236, 4237, 4238, 4239, 4240, 4241, 4242, 4243, 4244, 4293, 4294, 4295, 4296, 4297, 4298, 4299, 4300, 4301, 4302, 4303, 4304, 4305, 4306, 4307, 4308, 4309, 4310, 4359, 4360, 4361, 4362, 4363, 4364, 4365, 4366, 4367, 4368, 4369, 4370, 4403, 4404, 4405, 4406, 4407, 4408, 4415, 4416, 4417, 4418, 4419, 4420, 4427, 4428, 4429, 4430, 4431, 4432, 4433, 4434, 4435, 4445, 4446, 4447, 4448, 4449, 4450, 4451, 4452, 4453, 4463, 4464, 4465, 4466, 4467, 4468, 4475, 4476, 4477, 4478, 4479, 4480, 4487, 4488, 4489, 4490, 4491, 4492, 4493, 4494, 4495, 4505, 4506, 4507, 4508, 4509, 4510, 4511, 4512, 4513, 4523, 4524, 4525, 4526, 4527, 4528, 4535, 4536, 4537, 4538, 4539, 4540, 4547, 4548, 4549, 4550, 4551, 4552, 4553, 4554, 4555, 4565, 4566, 4567, 4568, 4569, 4570, 4571, 4572, 4573, 4583, 4584, 4585, 4586, 4587, 4588, 4589, 4590, 4591, 4592, 4593, 4594, 4607, 4608, 4609, 4610, 4611, 4612, 4619, 4620, 4621, 4622, 4623, 4624, 4631, 4632, 4633, 4634, 4635, 4636, 4653, 4654, 4655, 4656, 4657, 4658, 4675, 4676, 4677, 4678, 4679, 4680, 4681, 4682, 4683, 4708, 4709, 4710, 4711, 4712, 4713, 4714, 4715, 4716, 4741, 4742, 4743, 4744, 4745, 4746, 4763, 4764, 4765, 4766, 4767, 4768, 4785, 4786, 4787, 4788, 4789, 4790, 4791, 4792, 4793, 4818, 4819, 4820, 4821, 4822, 4823, 4824, 4825, 4826, 4851, 4852, 4853, 4854, 4855, 4856, 4873, 4874, 4875, 4876, 4877, 4878, 4895, 4896, 4897, 4898, 4899, 4900, 4901, 4902, 4903, 4928, 4929, 4930, 4931, 4932, 4933, 4934, 4935, 4936, 4961, 4962, 4963, 4964, 4965, 4966, 4967, 4968, 4969, 4970, 4971, 4972, 5005, 5006, 5007, 5008, 5009, 5010, 5027, 5028, 5029, 5030, 5031, 5032, 5121, 5122, 5123, 5124, 5135, 5136, 5137, 5138, 5149, 5150, 5151, 5152, 5163, 5164, 5165, 5166, 5177, 5178, 5179, 5180, 5191, 5192, 5193, 5194, 5205, 5206, 5207, 5208, 5219, 5220, 5221, 5222, 5233, 5234, 5250, 5252, 5254, 5255, 5258, 5259, 5264, 5265, 5268, 5269, 5272, 5273, 5274, 5275, 5276, 5277, 5278, 5279, 5280, 5281, 5282, 5283, 5316, 5317, 5318, 5319, 5320, 5321, 5322, 5323, 5324, 5325, 5326, 5327, 5360, 5361, 5362, 5363, 5364, 5365, 5366, 5367, 5368, 5369, 5370, 5371, 5372, 5373, 5374, 5375, 5376, 5377, 5426, 5427, 5428, 5429, 5430, 5431, 5432, 5433, 5434, 5435, 5436, 5437, 5438, 5439, 5440, 5441, 5442, 5443, 5492, 5493, 5494, 5495, 5496, 5497, 5498, 5499, 5500, 5501, 5502, 5503, 5536, 5537, 5538, 5539, 5540, 5541, 5542, 5543, 5544, 5545, 5546, 5547, 5580, 5581, 5582, 5583, 5584, 5585, 5586, 5587, 5588, 5589, 5590, 5591, 5592, 5593, 5594, 5595, 5596, 5597, 5646, 5647, 5648, 5649, 5650, 5651, 5652, 5653, 5654, 5655, 5656, 5657, 5658, 5659, 5660, 5661, 5662, 5663, 5712, 5713, 5714, 5715, 5716, 5717, 5734, 5735, 5736, 5737, 5738, 5739, 5756, 5757, 5758, 5759, 5760, 5761, 5778, 5779, 5780, 5781, 5782, 5783, 5800, 5801, 5802, 5803, 5804, 5805, 5822, 5823, 5824, 5825, 5826, 5827, 5844, 5845, 5846, 5847, 5848, 5849, 5866, 5867, 5868, 5869, 5870, 5871, 5888, 5889, 5890, 5891, 5902, 5903, 5904, 5905, 5916, 5917, 5923, 5924, 5930, 5933, 5934, 5935, 5936, 5937, 5938, 5939, 5940, 5941, 5942, 5943, 5944, 5945, 5946, 5947, 5948, 5949, 5950, 5951, 5952, 5953, 5954, 5955, 5956, 6021, 6022, 6023, 6024, 6025, 6026, 6027, 6028, 6029, 6030, 6031, 6032, 6065, 6066, 6067, 6068, 6069, 6070, 6071, 6072, 6073, 6074, 6075, 6076, 6077, 6078, 6079, 6080, 6081, 6082, 6131, 6132, 6133, 6134, 6135, 6136, 6137, 6138, 6139, 6140, 6141, 6142, 6143, 6144, 6145, 6146, 6147, 6148, 6197, 6198, 6199, 6200, 6201, 6202, 6203, 6204, 6225, 6226, 6227, 6228, 6239, 6240, 6241, 6242, 6243, 6244, 6245, 6246, 6247, 6248, 6249, 6250, 6251, 6252, 6253, 6254, 6255, 6256, 6257, 6258, 6259, 6260, 6261, 6262, 6327, 6328, 6329, 6330, 6331, 6332, 6333, 6334, 6335, 6336, 6337, 6338, 6371, 6372, 6378, 6379, 6380, 6381, 6382, 6383, 6384, 6385, 6386, 6387, 6388, 6389, 6390, 6391, 6392, 6393, 6394, 6395, 6444, 6445, 6446, 6447, 6448, 6449, 6450, 6451, 6452, 6453, 6454, 6455, 6456, 6457, 6458, 6459, 6460, 6461, 6510, 6511, 6512, 6513, 6518, 6519, 6520, 6521, 6526, 6527, 6530, 6531, 6534, 6536, 6537, 6538, 6539, 6540, 6541, 6542, 6543, 6552, 6553, 6554, 6555, 6566, 6567, 6568, 6569, 6580, 6581, 6587, 6588, 6594, 6597, 6598, 6599, 6600, 6601, 6602, 6603, 6604, 6659, 6660, 6666, 6667, 6668, 6669, 6680, 6681, 6687, 6690, 6691, 6692, 6693, 6704, 6705, 6714, 6716, 6720, 6722, 6723, 6724, 6725, 6726, 6727, 6728, 6729, 6730, 6731, 6732, 6733, 6766, 6767, 6768, 6769, 6770, 6771, 6772, 6773, 6774, 6775, 6776, 6777, 6810, 6811, 6812, 6813, 6814, 6815, 6816, 6817, 6818, 6819, 6820, 6821, 6822, 6823, 6824, 6825, 6826, 6827, 6876, 6877, 6878, 6879, 6880, 6881, 6882, 6883, 6884, 6885, 6886, 6887, 6888, 6889, 6890, 6891, 6892, 6893, 6942, 6943, 6944, 6945, 6946, 6947, 6948, 6949, 6950, 6951, 6952, 6953, 6986, 6987, 6988, 6989, 6990, 6991, 6992, 6993, 6994, 6995, 6996, 6997, 7030, 7031, 7032, 7033, 7034, 7035, 7036, 7037, 7038, 7039, 7040, 7041, 7042, 7043, 7044, 7045, 7046, 7047, 7096, 7097, 7098, 7099, 7100, 7101, 7102, 7103, 7104, 7105, 7106, 7107, 7108, 7109, 7110, 7111, 7112, 7113, 7162, 7163, 7164, 7165, 7166, 7167, 7168, 7169, 7170, 7171, 7172, 7173, 7206, 7207, 7208, 7209, 7210, 7211, 7228, 7229, 7230, 7231, 7232, 7233, 7234, 7235, 7236, 7237, 7238, 7239, 7272, 7273, 7274, 7275, 7276, 7277, 7512, 7513, 7514, 7515, 7516, 7517, 7518, 7519, 7520, 7521, 7522, 7523, 7524, 7525, 7526, 7527, 7528, 7529, 7530, 7531, 7532, 7533, 7534, 7535, 7536, 7537, 7538, 7539, 7540, 7541, 7542, 7543, 7544, 7545, 7546, 7547, 7548, 7549, 7550, 7551, 7552, 7553, 7554, 7555, 7556, 7557, 7558, 7559, 7560, 7561, 7562, 7563, 7564, 7565, 7566, 7567, 7568, 7569, 7570, 7571, 7572, 7573, 7574, 7575, 7576, 7577, 7578, 7579, 7580, 7581, 7582, 7583, 7584, 7585, 7586, 7587, 7588, 7589, 7590, 7591, 7592, 7593, 7594, 7595, 7596, 7597, 7598, 7599, 7600, 7601, 7602, 7603, 7604, 7605, 7606, 7607, 7608, 7609, 7610, 7611, 7612, 7613, 7614, 7615, 7616, 7617, 7618, 7619, 7620, 8069, 8070, 8071, 8072, 8073, 8074, 8075, 8076, 8077, 8078, 8079, 8080, 8081, 8082, 8083, 8084, 8085, 8086, 8087, 8088, 8089, 8090, 8091, 8092, 8093, 8094, 8095, 8096, 8097, 8098, 8099, 8100, 8101, 8102, 8103, 8104, 8105, 8106, 8107, 8108, 8109, 8110, 8111, 8112, 8113, 8114, 8115, 8116, 8117, 8118, 8119, 8120, 8121, 8122, 8123, 8124, 8125, 8126, 8127, 8128, 8129, 8130, 8131, 8132, 8133, 8134, 8135, 8136, 8137, 8138, 8139, 8140, 8141, 8142, 8143, 8144, 8145, 8146, 8147, 8148, 8149, 8150, 8151, 8152, 8153, 8154, 8155, 8156, 8157, 8158, 8159, 8160, 8161, 8162, 8163, 8405, 8406, 8407, 8408, 8409, 8410, 8411, 8412, 8413, 8414, 8415, 8416, 8417, 8418, 8419, 8420, 8421, 8422, 8423, 8424, 8425, 8426, 8427, 8428, 8429, 8430, 8431, 8432, 8433, 8434, 8435, 8436, 8437, 8438, 8439, 8440, 8441, 8442, 8443, 8444, 8445, 8446, 8447, 8448, 8449, 8450, 8451, 8452, 8453, 8454, 8455, 8456, 8457, 8458, 8459, 8460, 8461, 8462, 8463, 8464, 8465, 8466, 8467, 8468, 8469, 8470, 8471, 8472, 8473, 8474, 8475, 8476, 8477, 8478, 8479, 8480, 8481, 8482, 8483, 8484, 8485, 8486, 8487, 8488, 8489, 8490, 8491, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524, 8525, 8526, 8527, 8528, 8529, 8530, 8531, 8532, 8533, 8534, 8535, 8536, 8537, 8538, 8539, 8540, 8541, 8542, 8543, 8544, 8545, 8546, 8547, 8548, 8549, 8550, 8551, 8552, 8553, 8554, 8555, 8556, 8557, 8558, 8559, 8560, 8561, 8562, 8563, 8564, 8565, 8566, 8567, 8568, 8569, 8570, 8571, 8572, 8573, 8574, 8575, 8576, 8577, 8578, 8579, 8580, 8581, 8582, 8583, 8584, 8585, 8586, 8587, 8588, 8589, 8590, 8591, 8592, 8593, 8594, 8595, 8596, 8597, 8598, 8599, 8600, 8601, 8602, 8603, 8604, 8605, 8606, 8607, 8608, 8609, 8610, 8611, 8612, 8613, 8614, 8615, 8616, 8617, 8618, 8619, 8620, 8621, 8622, 8623, 8624, 8625, 8626, 8627, 8628, 8629, 8630, 8631, 8632, 8633, 8634, 8635, 8636, 8637, 8638, 8639, 8640, 8641, 8642, 8643, 8644, 8645, 8646, 8647, 8648, 8649, 8650, 8651, 8652, 8653, 9265, 9266, 9267, 9268, 9269, 9270, 9271, 9272, 9273, 9274, 9275, 9276, 9277, 9278, 9279, 9280, 9281, 9282]:
        # these are for list 13s and 16s: NEv2 affected by NonNE_obs (i.e. it is considered neuroendocrine)
        str_to_write_5 = """sampled_params_list.append(SampledParameter(name='sp_die_0_NEv2_cell_1', prior=norm(loc=np.log10(0.077),scale=.5)))"""
    else:
        # these are for list 14s and 17s: NEv2 affected by the neuroendocrine types (i.e. since it is Hes1+ it is considered non-neuroendocrine)
        str_to_write_5 = """sampled_params_list.append(SampledParameter(name='sp_die_0_NEv2_cell_1', prior=norm(loc=np.log10(0.085),scale=.5)))"""
    # list 15 and 18s wont even get here anyway
    str_to_write_6 = """
sampled_params_list.append(SampledParameter(name='sp_die_0_NEv2_cell_2', prior=norm(loc=np.log10(1000),scale=2)))

# NonNE div
sampled_params_list.append(SampledParameter(name='sp_division_0_NonNE_cell_0', prior=norm(loc=np.log10(0.769),scale=0.079)))
sampled_params_list.append(SampledParameter(name='sp_division_0_NonNE_cell_1', prior=norm(loc=np.log10(.731),scale=0.5)))
sampled_params_list.append(SampledParameter(name='sp_division_0_NonNE_cell_2', prior=norm(loc=np.log10(1000),scale=2)))
# NonNE die
sampled_params_list.append(SampledParameter(name='sp_die_0_NonNE_cell_0', prior=norm(loc=np.log10(0.081),scale=0.236)))
sampled_params_list.append(SampledParameter(name='sp_die_0_NonNE_cell_1', prior=norm(loc=np.log10(0.085),scale=.5)))
sampled_params_list.append(SampledParameter(name='sp_die_0_NonNE_cell_2', prior=norm(loc=np.log10(1000),scale=2)))

## Diffs with effect

# NE to NEv2
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NE_cell_NEv2_diff_cell_0', prior=uniform(loc=np.log10(0.01),scale=3.5)))
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NE_cell_NEv2_diff_cell_1', prior=uniform(loc=np.log10(0.05),scale=4)))
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NE_cell_NEv2_diff_cell_2', prior=norm(loc=np.log10(1000),scale=2)))

# NE to NEv1
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NE_cell_NEv1_diff_cell_0', prior=uniform(loc=np.log10(0.01),scale=3.5)))
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NE_cell_NEv1_diff_cell_1', prior=uniform(loc=np.log10(0.05),scale=4)))
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NE_cell_NEv1_diff_cell_2', prior=norm(loc=np.log10(1000),scale=2)))

# NEv2 to NonNE
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NEv2_cell_NonNE_diff_cell_0', prior=uniform(loc=np.log10(0.01),scale=3.5)))
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NEv2_cell_NonNE_diff_cell_1', prior=uniform(loc=np.log10(0.05),scale=4)))
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NEv2_cell_NonNE_diff_cell_2', prior=norm(loc=np.log10(1000),scale=2)))

# NEv1 to NonNE
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NEv1_cell_NonNE_diff_cell_0', prior=uniform(loc=np.log10(0.01),scale=3.5)))
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NEv1_cell_NonNE_diff_cell_1', prior=uniform(loc=np.log10(0.05),scale=4)))
sampled_params_list.append(SampledParameter(name='sp_diff_uni_0_NEv1_cell_NonNE_diff_cell_2', prior=norm(loc=np.log10(1000),scale=2)))


rates_mask = []
for i in [x for x in model.parameters]:
    rates_mask.append('sp_'+i.name in [y.name for y in sampled_params_list])

sp_list = []
for i in [x for x in sampled_params_list]:
    if i.name.split('sp_')[1] in [y.name for y in model.parameters]:
        sp_list.append(i)

# for checking that the parameters got in the right order
#for i in sp_list:
#    print (i.name + ' ' + str(10**(i.prior_dist.mean())))
#sys.exit(0)

population_size=popsize

if uses_modeliter:
    sfr = paramdir+"/dir_model_"""+str(number)+"""_"+str(modeliter)+"/model_"""+str(number)+"""_"+str(modeliter)+"_"
else:
    sfr = paramdir+"/dir_model_"""+str(number)+"""/model_"""+str(number)+"""_"

MNNS = MultiNestNestedSampling(sp_list,
                               likelihood,
                               population_size,
                               importance_nested_sampling=INS,
                               const_efficiency_mode=ceff,
                               sampling_efficiency=f,
                               sam_file_root = sfr)

log_evidence, log_evidence_error = MNNS.run(verbose=True)
# not really using these because all the info is in the outfiles

print(log_evidence)
print(log_evidence_error)

"""
    str_to_write_1+=str_to_write_2
    str_to_write_1+=str_to_write_3
    str_to_write_1+=str_to_write_4
    str_to_write_1+=str_to_write_5
    str_to_write_1+=str_to_write_6
    fname = run_file_dir+"/run_model_"+str(number)+"_TKO_betafit.py"
    f = open(fname,"w")
    f.write(str_to_write_1)
    f.close()
